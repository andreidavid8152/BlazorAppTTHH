@page "/"

@using BlazorAppTTHH.Models
@using BlazorAppTTHH.Mediator
@layout LoginLayout
@inject IMediatorAPI _mediator
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="forms-container">
        <div class="signin-signup">
            <form class="sign-in-form" @onsubmit="HandleLogin">
                <h2 class="title">Inicio de sesión</h2>
                <div class="input-field">
                    <i class="fas fa-user"></i>
                    <input type="text" placeholder="Usuario" @bind="loginModel.Usuario" />
                </div>
                <div class="input-field">
                    <i class="fas fa-lock"></i>
                    <input type="password" placeholder="Contraseña" @bind="loginModel.Password" />
                </div>
                <div class="input-field">
                    <i class="fas fa-chevron-down arrow-icon"></i>
                    <select @bind="selectedEmisor">
                        <option value="" disabled selected hidden>Seleccione una opción</option>
                        @if (emisores != null)
                        {
                            @foreach (var emisor in emisores)
                            {
                                <option value="@emisor.Codigo">@emisor.Codigo- @emisor.NombreEmisor</option>
                            }
                        }
                        else
                        {
                            <option>Cargando datos...</option>
                        }
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message" style="color:red">
                        @errorMessage
                    </div>
                }


                <input type="submit" value="Ingresar" class="mt-6 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-10 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" />
            </form>
        </div>
    </div>
    <div class="panels-container">
        <div class="panel left-panel">
            <h1 class="mb-6 mt-4 text-4xl font-extrabold leading-none tracking-tight dark:text-black">SISTEMA TTHH</h1>
            <h1>Realizado por el grupo 1</h1>
            <img src="img/log.svg" class="image" alt="" />
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private List<Emisor> emisores;
    private int selectedEmisor;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        emisores = await _mediator.GetEmisores();
    }

    private async Task HandleLogin()
    {
        errorMessage = ""; // Limpiar mensajes de error anteriores

        // Validar que el usuario no sea nulo o vacío
        if (string.IsNullOrEmpty(loginModel.Usuario))
        {
            errorMessage = "El usuario no debe estar vacío.";
            return;
        }

        // Validar que la contraseña no sea nula o vacía
        if (string.IsNullOrEmpty(loginModel.Password))
        {
            errorMessage = "La contraseña no debe estar vacía.";
            return;
        }

        // Validar que la contraseña tenga exactamente 4 caracteres
        if (loginModel.Usuario.Length != 4)
        {
            errorMessage = "El usuario debe tener exactamente 4 caracteres.";
            return;
        }

        try
        {
            var usuarioResponse = await _mediator.Login(loginModel);

            if (usuarioResponse != null && usuarioResponse.Observacion == "INGRESO EXITOSO")
            {
                if (usuarioResponse.Emisor == selectedEmisor.ToString())
                {

                    //Guarda en la variable de sesion saveUserData informacion especifica del usuario. 
                    await JSRuntime.InvokeVoidAsync("saveUserData", usuarioResponse);

                    // Redireccionar a Home.razor
                    NavigationManager.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "El emisor seleccionado no coincide con el emisor del usuario ingresado.";
                }
            }
            else
            {
                errorMessage = "El inicio de sesión no fue exitoso. Por favor, verifique sus credenciales.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error durante el inicio de sesión: {ex.Message}";
        }
    }
}
